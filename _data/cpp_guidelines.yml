- id: 1
  name: code_arrangement
  title: Code Arrangement
  entries:
    - id: 1
      text: "Don't put method definitions (including empty) in `.h` files."
    - id: 2
      text: "Put each class declaration in an extra `.h` file."

- id: 2
  name: code_formatting
  title: Code Formatting
  entries:
    - id: 1
      text: "Use `UTF-8` encoding for all source files."
    - id: 2
      text: "Indent code by `4` spaces (no tabs)."
    - id: 3
      text: "Use `<` and `>` for external libraries as well as local public includes."
    - id: 4
      text: "Be consistent within your own code and the project's code that you are working on."

- id: 3 
  name: naming_conventions
  title: Type Naming
  entries:
    - id: 1
      text: "Use [CamelCase](http://en.wikipedia.org/wiki/CamelCase) for class and enum names."
    - id: 2
      text: "Use [CamelCase](http://en.wikipedia.org/wiki/CamelCase) beginning with a lowercase letter for function and method names."
    - id: 3
      text: "Start names of classes having pure virtual methods with `Abstract`."
    - id: 4
      text: "Use [CamelCase](http://en.wikipedia.org/wiki/CamelCase) for files containing structs, classes, or enums."
    - id: 5
      text: "Omit prefixes (e.g., `get`) for getters."
      ref: "/2015/06/21/getter-setter-naming"
    - id: 6
      text: "Add `set` prefix to setters."
      ref: "/2015/06/21/getter-setter-naming"
    - id: 7
      text: "Add `m_` prefix to member variables, `s_` to static member variables, `t_` to thread-local variables, and `g_` to global variables."
    - id: 8
      text: "Don't add prefixes to local variables and [formal parameters](http://stackoverflow.com/a/18870232)."

- id: 4
  name: designing_classes
  title: Designing Classes
  entries:
    - id: 1
      text: "As a default, use public inheritance."
    - id: 3
      text: "Consider making the public interface non-virtual."
    - id: 4
      text: "Avoid virtual inheritance."
    - id: 5
      text: "Avoid friend declarations."
    - id: 7
      text: "Use `struct` for Plain Old Data structors ([POD](https://de.wikipedia.org/wiki/Plain_Old_Data_structure)), `class` when using object-oriented features."
    - id: 8
      text: "Don't use nested classes in a public interface. (They cannot be forward declared.)"
    - id: 9
      text: "Adhere to the given declaration order (i.e. member variables last â€¦)."

- id: 5
  name: designing_interface_signatures
  title: Designing Interface Signatures
  entries:
    - id: 1
      text: "Follow the table of parameter passing."
      ref: "/2015/06/17/parameter-passing"
    - id: 2
      text: "Declare member functions that do not change the member variables `const`."

- id: 6
  name: including_dependencies
  title: Include Dependencies
  entries:
    - id: 1
      text: "Almost always use forward declarations."
    - id: 2
      text: "Avoid use forward declarations for the following libraries: STL, glm (use `glm/fwd.hpp` and `iosfwd` instead)."
    - id: 3
      text: "Adhere to the following include order: corresponding header (if applicable), std headers, low-level third-party headers, high-level third-party headers, local headers."
    - id: 4
      text: "Use `#pragma once` instead of `#define` guards."

- id: 7
  name: implementation_design
  title: Implementation Design
  entries:
    - id: 1
      text: "Use [guard clauses](https://sourcemaking.com/refactoring/replace-nested-conditional-with-guard-clauses) where applicable."
    - id: 2
      text: "Use assertions as a means to protect against self-induced programming mistakes."
    - id: 3
      text: "Use C++ style casts (static, dynamic, reinterpret) for class pointers, prefer for primitive data types."
    - id: 4
      text: "Initialize all declared variables (especially basic types like `bool`, `int` and `float`, consider right-hand style)."
      ref: "/2015/06/21/almost-always-auto"
    - id: 5
      text: "Prefer the standard template library (especially the Algorithms library) over custom code."
      ref: "/2015/06/21/standard-template-library"
    - id: 6
      text: "Make use of suffix literals."
    - id: 7
      text: "Prefer iterators over index based access."
    - id: 8
      text: "Prefer range-based for loops."
    - id: 9
      text: "Avoid owning raw pointers, new and delete (Smart pointers are the default)."
    - id: 10
      text: "Use non-owning raw `*` and `&` especially for parameters."
    - id: 11
      text: "When passing pointers, handle passing a `nullptr`."
    - id: 12
      text: "Declare constant variables `const`."
    - id: 13
      text: "Prefer small and focused functions."

- id: 8
  name: comment_style
  title: Comment Style
  entries:
    - id: 1
      text: "Follow the comment style guidelines specific to the project."
    - id: 2
      text: "Add class comments."
    - id: 3
      text: "Use ToDo comments for code that is temporary, a short-term solution, or good-enough but not perfect. 
        (Form: `// ToDo(<name|email|github>) <description>`)"
    - id: 4
      text: "Add comments in tricky, non-obvious, interesting, or important parts of your implementation code."
    - id: 5
      text: "Do not describe the code; assume that the person reading the code knows C++ better than you do."
    - id: 6
      text: "Eventually remove commented code; we use version control systems."

- id: 9
  name: general_cpp11_features
  title: General C++11 Features
  entries:
    - id: 1
      text: "Use `override` for overridden methods, omit redundant virtual ."
    - id: 2
      text: "Use `auto` where applicable (see right-hand style)."
      ref: "/2015/06/21/almost-always-auto"
    - id: 3
      text: "Avoid `mutable`."
    - id: 4
      text: "Capture variables in lambdas explicitly."
    - id: 5
      text: "Use enum classes and specify underlying type."
    - id: 6
      text: "Use `= delete` and `= default` where applicable (hint: can also be used in definition)."
    - id: 7
      text: "Prefer `= default` over empty methods."
    - id: 8
      text: "Use `using` instead of `typedef`."
    - id: 9
      text: "Use uniform initialization except for container constructors where you don't want to pass elements."
    - id: 10
      text: "Know how to view deduced types."
    - id: 11
      text: "Use `std::array` instead of c arrays (also for multi-dimensional arrays)."
    - id: 12
      text: "Don't use constant expressions as they are not fully supported yet by all compilers."
    - id: 13
      text: "Use `nullptr` for null pointers, `0` for numbers; avoid `NULL` altogether."

- id: 10
  name: templates
  title: Templates
  entries:
    - id: 1
      text: "Always split template declaration and definition (put definitions in `.hpp` file)."
    - id: 2
      text: "Include implementation file in header file and vice versa."

- id: 11
  name: cross_platform_compatibility
  title: Cross-platform Compatibility
  entries:
    - id: 1
      text: "Assure all Dependencies are available cross-platform."
    - id: 2
      text: "Use `WIN32`, `__APPLE__` and the else clause for Linux to dispatch platform dependent code."
    - id: 3
      text: "Always include respective c standard library headers (use [c-prefixed includes](http://www.cplusplus.com/reference/clibrary/), e.g., `#include <cmath>`)."

- id: 12
  name: library_design
  title: Library Design
  entries:
    - id: 1
      text: "Export only public classes, structs and functions (`<library uppercase name>_API`)."
    - id: 2
      text: "Don't export templates and enums (it is illegal anyway)."
    - id: 3
      text: "Public headers belong in `source/<library name>/include/<library name>/`."
    - id: 4
      text: "Private headers belong in `source/<library name>/source/`."

- id: 13
  name: commmon_mistakes
  title: Common Mistakes
  entries:
    - id: 1
      text: "`std::function` is not the type of lambdas, it's a wrapper."
    - id: 2
      text: "`dynamic_cast` is not the default for class up casts; if you know the type, use `static_cast`."
    - id: 3
      text: "C++ is not Java; Use stack memory to initialize concrete types."
    - id: 4
      text: "Don't use iterators into resized vectors."
    - id: 5
      text: "Avoid allocating container classes on the heap."
    - id: 6
      text: "Make destructors of base classes virtual."

- id: 14
  name: performance_considerations
  title: Performance Considerations
  entries:
    - id: 1
      text: "Avoid continous heap memory allocations in large loops."
    - id: 2
      text: "Inline methods and functions only after performance measurements."
    - id: 3
      text: "Use princrementation as default."
    - id: 4
      text: "Consider [return value optimization](https://en.wikipedia.org/wiki/Return_value_optimization)."
    - id: 5
      text: "Prefer to perform costly operations lazy."
    - id: 6
      text: "Prefer `std::vector` as your default container."

- id: 15
  name: miscellaneous
  title: Miscellaneous
  entries:
    - id: 1
      text: "Check your design if you make heavy use of down casts. It is often a sign of bad design."
    - id: 2
      text: "Prefer nonmember functions for symmetric operators."
    - id: 3
      text: "No `using namespace` in header files."
